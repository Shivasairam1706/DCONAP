version: "3.9"

########################################
# Networks & Volumes
########################################
networks:
  dconap_network:
    name: ${DOCKER_NETWORK:-dconap-network}
    driver: bridge

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME:-postgres_data}
  redis_data:
    name: ${REDIS_VOLUME:-redis_data}
  grafana_data:
    name: ${GRAFANA_VOLUME:-grafana_data}
  spark_warehouse:
    name: ${SPARK_WAREHOUSE_VOLUME:-spark_warehouse}
  spark_logs:
    name: ${SPARK_LOGS_VOLUME:-spark_logs}
  gitlab_config:
    name: ${GITLAB_CONFIG_VOLUME:-gitlab_config}
  gitlab_logs:
    name: ${GITLAB_LOGS_VOLUME:-gitlab_logs}
  gitlab_data:
    name: ${GITLAB_DATA_VOLUME:-gitlab_data}
  prometheus_data:
    name: ${PROMETHEUS_VOLUME:-prometheus_data}
  superset_data:
    name: ${SUPERSET_VOLUME:-superset_data}

########################################
# Services
########################################
services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - dconap_network
    profiles:
      - base
      - dev
      - full
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:6.2
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - dconap_network
    profiles:
      - base
      - dev
      - full
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  gitlab:
    image: gitlab/gitlab-ce:latest
    restart: always
    hostname: "${GITLAB_HOSTNAME:-gitlab.example.com}"
    ports:
      - "${GITLAB_PORT_HTTP:-80}:80"
      - "${GITLAB_PORT_HTTPS:-443}:443"
      - "${GITLAB_PORT_SSH:-22}:22"
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://${GITLAB_HOSTNAME:-gitlab.example.com}'
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_PORT_SSH:-22}
    networks:
      - dconap_network
    profiles:
      - base
      - full
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  spark-master:
    image: bitnami/spark:3.5.0
    hostname: spark-master
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
    ports:
      - "${SPARK_MASTER_UI_PORT:-8088}:8080"
      - "${SPARK_MASTER_PORT:-7077}:7077"
    volumes:
      - spark_warehouse:/opt/bitnami/spark/warehouse
      - spark_logs:/opt/bitnami/spark/logs
    networks:
      - dconap_network
    profiles:
      - spark
      - full
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  spark-worker:
    image: bitnami/spark:3.5.0
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: ${SPARK_WORKER_MEMORY:-1G}
      SPARK_WORKER_CORES: ${SPARK_WORKER_CORES:-2}
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
    volumes:
      - spark_warehouse:/opt/bitnami/spark/warehouse
      - spark_logs:/opt/bitnami/spark/logs
    networks:
      - dconap_network
    profiles:
      - spark
      - full
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  airflow:
    image: apache/airflow:2.6.3
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
      AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
      AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    volumes:
      - ./docker/dags:/opt/airflow/dags
    ports:
      - "${AIRFLOW_PORT:-8081}:8080"
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dconap_network
    profiles:
      - batch
      - full
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana_provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    networks:
      - dconap_network
    profiles:
      - monitoring
      - full
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    networks:
      - dconap_network
    profiles:
      - realtime
      - full
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - dconap_network
    profiles:
      - realtime
      - full
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  flink-jobmanager:
    image: apache/flink:1.17.1-scala_2.12
    depends_on:
      - kafka
    command: jobmanager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
    ports:
      - "${FLINK_JOBMANAGER_UI_PORT:-8082}:8081"
      - "${FLINK_JOBMANAGER_PORT:-6123}:6123"
    networks:
      - dconap_network
    profiles:
      - realtime
      - full
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  flink-taskmanager:
    image: apache/flink:1.17.1-scala_2.12
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: ${FLINK_TASK_SLOTS:-2}
    scale: ${FLINK_TASKMANAGER_SCALE:-2}
    networks:
      - dconap_network
    profiles:
      - realtime
      - full
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  superset:
    image: apache/superset:2.1.0
    depends_on:
      - postgres
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_ADMIN_USER: ${SUPERSET_ADMIN_USER}
      SUPERSET_ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
      SUPERSET_ADMIN_FIRSTNAME: ${SUPERSET_ADMIN_FIRSTNAME}
      SUPERSET_ADMIN_LASTNAME: ${SUPERSET_ADMIN_LASTNAME}
    ports:
      - "${SUPERSET_PORT:-8085}:8088"
    volumes:
      - superset_data:/app/superset_home
    networks:
      - dconap_network
    profiles:
      - web
      - full
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - dconap_network
    profiles:
      - monitoring
      - full
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  development:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
        JUPYTER_PORT: ${JUPYTER_PORT}
        JUPYTER_WORKSPACE_DIR: ${JUPYTER_WORKSPACE_DIR}
    environment:
      JUPYTER_PASSWORD: ${JUPYTER_PASSWORD}
      JUPYTER_TOKEN: ${JUPYTER_TOKEN}
      AWS_SECRET_NAME: ${AWS_SECRET_NAME:-}
      JUPYTER_MOUNT_PATH: ${JUPYTER_WORKSPACE_DIR}
    volumes:
      - ./baseline:${JUPYTER_WORKSPACE_DIR}
    ports:
      - "${JUPYTER_PORT:-8888}:${JUPYTER_PORT:-8888}"
    networks:
      - dconap_network
    profiles:
      - dev
      - spark
      - full
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
########################################
# End of docker-compose.yml
########################################
