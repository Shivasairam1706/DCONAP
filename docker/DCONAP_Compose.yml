version: "3.8"
services:
  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: datacenter_data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - datacenter_network
    profiles:
      - base

  redis:
    image: redis:6.2
    ports:
      - "6379:6379"
    networks:
      - datacenter_network
    profiles:
      - base
      - realtime
      - batch
      - web

  gitlab:
    image: "gitlab/gitlab-ce:latest"
    restart: always
    hostname: "gitlab.example.com"
    ports:
      - "80:80"
      - "443:443"
      - "22:22" # Consider changing host port
    volumes:
      - "$GITLAB_HOME/config:/etc/gitlab"
      - "$GITLAB_HOME/logs:/var/log/gitlab"
      - "$GITLAB_HOME/data:/var/opt/gitlab"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.example.com'
        gitlab_rails['gitlab_shell_ssh_port'] = 22
    networks:
      - datacenter_network
    profiles:
      - base # GitLab is often needed throughout

  spark-master:
    image: bitnami/spark:3.5.0
    hostname: spark-master
    ports:
      - "8088:8080" # Spark UI
      - "7077:7077" # Spark Master Port
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      -./spark-warehouse:/opt/bitnami/spark/warehouse
      -./spark-logs:/opt/bitnami/spark/logs
    networks:
      - datacenter_network
    profiles:
      - spark

  spark-worker-1:
    image: bitnami/spark:3.5.0
    hostname: spark-worker-1
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      -./spark-warehouse:/opt/bitnami/spark/warehouse
      -./spark-logs:/opt/bitnami/spark/logs
    networks:
      - datacenter_network
    profiles:
      - spark

  airflow:
    image: apache/airflow:2.6.3
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://myuser:mypassword@postgres/datacenter_data
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://myuser:mypassword@postgres/datacenter_data
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    volumes:
      -./docker/dags:/opt/airflow/dags # Assuming you'll put DAGs in docker/dags
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test:
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - datacenter_network
    profiles:
      - full
      - batch

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      -./docker/grafana_provisioning:/etc/grafana/provisioning # Assuming provisioning in docker/grafana_provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - datacenter_network
    profiles:
      - full
      - monitoring
    depends_on:
      - prometheus

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_MS: -1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - datacenter_network
    profiles:
      - full
      - realtime

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - datacenter_network
    profiles:
      - full
      - realtime

  flink-jobmanager:
    image: apache/flink:1.17.1-scala_2.12
    hostname: flink-jobmanager
    ports:
      - "6123:6123"
      - "8081:8081"
    command: jobmanager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
    depends_on:
      - kafka
    networks:
      - datacenter_network
    profiles:
      - full
      - realtime

  flink-taskmanager:
    image: apache/flink:1.17.1-scala_2.12
    hostname: flink-taskmanager
    command: taskmanager
    scale: 2
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    depends_on:
      - flink-jobmanager
    networks:
      - datacenter_network
    profiles:
      - full
      - realtime

  superset:
    image: apache/superset:2.1.0
    ports:
      - "8088:8088"
    depends_on:
      - postgres
    environment:
      SUPERSET_SECRET_KEY: "your_secret_key_here"
      SUPERSET_ADMIN_USER: "admin"
      SUPERSET_ADMIN_PASSWORD: "admin"
      SUPERSET_ADMIN_FIRSTNAME: "Admin"
      SUPERSET_ADMIN_LASTNAME: "User"
    networks:
      - datacenter_network
    profiles:
      - full
      - web

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      -./docker/prometheus.yml:/etc/prometheus/prometheus.yml # Assuming prometheus.yml in docker/
    networks:
      - datacenter_network
    profiles:
      - full
      - monitoring

  dev:
    build:
      context:./docker # Context is now the docker folder
      dockerfile: Dockerfile
      args:
        UID: ${USER_ID:-1000}
        GID: ${GROUP_ID:-1000}
        JUPYTER_MOUNT_PATH: /home/jupyteruser/work # Mount path inside container remains the same
    restart: always
    ports:
      - "8888:8888"
    volumes:
      -./work:/home/jupyteruser/work # Mount the work folder
    environment:
      JUPYTER_PASSWORD: "your_dev_password"
    networks:
      - datacenter_network
    depends_on:
      - spark-master
    profiles:
      - dev
      - spark # Added spark profile to dev as it depends on it

volumes:
  postgres_data:
  grafana_data:
networks:
  datacenter_network:
    driver: bridge
